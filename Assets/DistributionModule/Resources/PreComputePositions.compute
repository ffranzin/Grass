

#pragma kernel ComputePositions

#include "Assets\NoisesShader\Resources\SimplexNoise2D.cginc"
#include "Assets\NoisesShader\Resources\NoiseUtils.cginc"
#include "Assets\NoisesShader\Resources\ClassicNoise2D.cginc"
#include "Assets\DistributionModule\Resources\GrassUtils.cginc"
#include "Assets\GrassVariables.cginc"

//AppendStructuredBuffer<float4> _positionsBuffer;

float4 _gridDim;
float4 _cellDesc;
float4 _positionsBufferDesc;
int _distribuitionSeed;

RWTexture2D<float4> _positionsBufferAtlas;

float frequency;
float gain;
float lacunarity;
float amplitude;
int octaves;


inline float ScaleNoise(float2 seed)
{
	float highFrequence = abs(simplexfbm2D(seed, octaves, frequency, lacunarity, gain, amplitude));
	float highFrequence2 = abs(simplexfbm2D(seed, octaves, frequency, lacunarity, gain, amplitude * 1.3));

	float lowFrequence = abs(simplexnoise2D(seed));

	return max(lowFrequence, highFrequence * highFrequence2);
}



inline float2 CellMin()		{return _cellDesc.xy;}
inline float2 CellSize()	{return _cellDesc.zw;}


[numthreads(8,8,1)]
void ComputePositions(uint3 id : SV_DispatchThreadID)
{
	if(id.x > _gridDim.x || id.y > _gridDim.x)	return;
	
	float2 uv = saturate(id.xy / _gridDim.x);

	float halfCellSize = _gridDim.y * .5;

	float2 displacement = float2(halfCellSize, halfCellSize) /*Translate to center of gridCell*/ 
						+ (RandomPosInsideSquere((uv * _distribuitionSeed), id.x) * halfCellSize);
	
	float2 posWorld = CellMin() + uv * CellSize() + displacement;

	//posWorld = CellMin() + RandomPosInsideSquere((id.xy * _distribuitionSeed), 1) * CellSize();

	float scale = ScaleNoise(posWorld % 100);
	
	_positionsBufferAtlas[id.xy + _positionsBufferDesc.xy] = float4(posWorld.x, 0, posWorld.y, scale);
}


